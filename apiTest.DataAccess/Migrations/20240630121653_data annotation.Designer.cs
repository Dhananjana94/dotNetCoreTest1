// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using apiTest.DataAccess;

#nullable disable

namespace apiTest.DataAccess.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20240630121653_data annotation")]
    partial class dataannotation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("apiTest.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "dibulagala",
                            City = "Galpola",
                            Name = "Wasantha perera",
                            Street = "60 para"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Raththota",
                            City = "thota",
                            Name = "Wasthi anushka",
                            Street = "30 para"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Galgamuwa",
                            City = "muwa",
                            Name = "Sumanapala herath",
                            Street = "20 para"
                        });
                });

            modelBuilder.Entity("apitest.Models.TstMdl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("TstMdlTble");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 6, 30, 17, 46, 53, 448, DateTimeKind.Local).AddTicks(5369),
                            Description = "testing model 1",
                            Status = 0,
                            Title = "Test model 1 from sql",
                            UpdatedDate = new DateTime(2024, 7, 5, 17, 46, 53, 448, DateTimeKind.Local).AddTicks(5382)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 6, 30, 17, 46, 53, 448, DateTimeKind.Local).AddTicks(5391),
                            Description = "testing model 2",
                            Status = 0,
                            Title = "Test model 2",
                            UpdatedDate = new DateTime(2024, 7, 5, 17, 46, 53, 448, DateTimeKind.Local).AddTicks(5391)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 6, 30, 17, 46, 53, 448, DateTimeKind.Local).AddTicks(5394),
                            Description = "testing model 3",
                            Status = 0,
                            Title = "Test model 3",
                            UpdatedDate = new DateTime(2024, 7, 5, 17, 46, 53, 448, DateTimeKind.Local).AddTicks(5394)
                        });
                });

            modelBuilder.Entity("apitest.Models.TstMdl", b =>
                {
                    b.HasOne("apiTest.Models.Author", "Author")
                        .WithMany("tstMdls")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("apiTest.Models.Author", b =>
                {
                    b.Navigation("tstMdls");
                });
#pragma warning restore 612, 618
        }
    }
}
